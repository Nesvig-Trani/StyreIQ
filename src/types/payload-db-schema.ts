/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import {
  pgTable,
  index,
  uniqueIndex,
  foreignKey,
  serial,
  varchar,
  integer,
  type AnyPgColumn,
  boolean,
  numeric,
  timestamp,
  jsonb,
  pgEnum,
} from '@payloadcms/db-vercel-postgres/drizzle/pg-core'
import { sql, relations } from '@payloadcms/db-vercel-postgres/drizzle'
export const enum_organization_type = pgEnum('enum_organization_type', [
  'higher_education_institution',
  'government_agency',
  'healthcare_system',
  'corporate_enterprise',
  'nonprofit_organization',
  'division',
  'school_faculty',
  'department',
  'office',
  'program',
  'initiative',
  'other',
])
export const enum_organization_status = pgEnum('enum_organization_status', [
  'active',
  'inactive',
  'pending_review',
])
export const enum_organization_access_type = pgEnum('enum_organization_access_type', [
  'temporary',
  'permanent',
])
export const enum_users_role = pgEnum('enum_users_role', [
  'super_admin',
  'unit_admin',
  'social_media_manager',
])
export const enum_users_status = pgEnum('enum_users_status', [
  'active',
  'inactive',
  'rejected',
  'pending_activation',
])
export const enum_social_medias_linked_tools = pgEnum('enum_social_medias_linked_tools', [
  'Hootsuite',
  'Canva',
  'Sprout',
  'Other',
])
export const enum_social_medias_platform = pgEnum('enum_social_medias_platform', [
  'facebook',
  'instagram',
  'twitter',
  'linkedin',
  'tiktok',
  'youtube',
  'other',
])
export const enum_social_medias_third_party_management = pgEnum(
  'enum_social_medias_third_party_management',
  ['yes', 'no'],
)
export const enum_social_medias_password_management_practice = pgEnum(
  'enum_social_medias_password_management_practice',
  ['Password Manager', 'Manual', 'Other'],
)
export const enum_social_medias_verification_status = pgEnum(
  'enum_social_medias_verification_status',
  ['verified', 'notVerified', 'pending'],
)
export const enum_social_medias_status = pgEnum('enum_social_medias_status', [
  'active',
  'inactive',
  'in_transition',
  'pending_approval',
])
export const enum_flags_status = pgEnum('enum_flags_status', [
  'resolved',
  'pending',
  'not_applicable',
])
export const enum_flags_source = pgEnum('enum_flags_source', ['automated', 'manual'])
export const enum_flag_history_action = pgEnum('enum_flag_history_action', [
  'created',
  'status_changed',
  'comment',
])
export const enum_flag_history_prev_status = pgEnum('enum_flag_history_prev_status', [
  'resolved',
  'pending',
  'not_applicable',
])
export const enum_flag_history_new_status = pgEnum('enum_flag_history_new_status', [
  'resolved',
  'pending',
  'not_applicable',
])
export const enum_audit_log_action = pgEnum('enum_audit_log_action', [
  'create',
  'update',
  'delete',
  'approval',
  'flag_resolution',
  'policy_acknowledgment',
  'user_creation',
  'password_recovery',
  'password_reset',
])
export const enum_payload_jobs_log_task_slug = pgEnum('enum_payload_jobs_log_task_slug', [
  'inline',
  'flagInactiveAccounts',
  'detectRisks',
])
export const enum_payload_jobs_log_state = pgEnum('enum_payload_jobs_log_state', [
  'failed',
  'succeeded',
])
export const enum_payload_jobs_task_slug = pgEnum('enum_payload_jobs_task_slug', [
  'inline',
  'flagInactiveAccounts',
  'detectRisks',
])

export const organization = pgTable(
  'organization',
  {
    id: serial('id').primaryKey(),
    name: varchar('name').notNull(),
    type: enum_organization_type('type').notNull(),
    parentOrg: integer('parent_org_id').references((): AnyPgColumn => organization.id, {
      onDelete: 'set null',
    }),
    admin: integer('admin_id')
      .notNull()
      .references(() => users.id, {
        onDelete: 'set null',
      }),
    email: varchar('email'),
    phone: varchar('phone'),
    status: enum_organization_status('status'),
    description: varchar('description'),
    delegatedPermissions: boolean('delegated_permissions'),
    path: varchar('path'),
    depth: numeric('depth'),
    disabled: boolean('disabled'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    organization_name_idx: uniqueIndex('organization_name_idx').on(columns.name),
    organization_parent_org_idx: index('organization_parent_org_idx').on(columns.parentOrg),
    organization_admin_idx: index('organization_admin_idx').on(columns.admin),
    organization_updated_at_idx: index('organization_updated_at_idx').on(columns.updatedAt),
    organization_created_at_idx: index('organization_created_at_idx').on(columns.createdAt),
  }),
)

export const organization_rels = pgTable(
  'organization_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('organization_rels_order_idx').on(columns.order),
    parentIdx: index('organization_rels_parent_idx').on(columns.parent),
    pathIdx: index('organization_rels_path_idx').on(columns.path),
    organization_rels_users_id_idx: index('organization_rels_users_id_idx').on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [organization.id],
      name: 'organization_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'organization_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const organization_access = pgTable(
  'organization_access',
  {
    id: serial('id').primaryKey(),
    organization: integer('organization_id').references(() => organization.id, {
      onDelete: 'set null',
    }),
    user: integer('user_id').references(() => users.id, {
      onDelete: 'set null',
    }),
    type: enum_organization_access_type('type'),
    start_date: timestamp('start_date', { mode: 'string', withTimezone: true, precision: 3 }),
    end_date: timestamp('end_date', { mode: 'string', withTimezone: true, precision: 3 }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    organization_access_organization_idx: index('organization_access_organization_idx').on(
      columns.organization,
    ),
    organization_access_user_idx: index('organization_access_user_idx').on(columns.user),
    organization_access_updated_at_idx: index('organization_access_updated_at_idx').on(
      columns.updatedAt,
    ),
    organization_access_created_at_idx: index('organization_access_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const welcome_emails_responsibilities = pgTable(
  'welcome_emails_responsibilities',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    responsibility: varchar('responsibility').notNull(),
  },
  (columns) => ({
    _orderIdx: index('welcome_emails_responsibilities_order_idx').on(columns._order),
    _parentIDIdx: index('welcome_emails_responsibilities_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [welcome_emails.id],
      name: 'welcome_emails_responsibilities_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const welcome_emails_policy_links = pgTable(
  'welcome_emails_policy_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title').notNull(),
    url: varchar('url').notNull(),
  },
  (columns) => ({
    _orderIdx: index('welcome_emails_policy_links_order_idx').on(columns._order),
    _parentIDIdx: index('welcome_emails_policy_links_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [welcome_emails.id],
      name: 'welcome_emails_policy_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const welcome_emails = pgTable(
  'welcome_emails',
  {
    id: serial('id').primaryKey(),
    instructions: varchar('instructions').notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    welcome_emails_updated_at_idx: index('welcome_emails_updated_at_idx').on(columns.updatedAt),
    welcome_emails_created_at_idx: index('welcome_emails_created_at_idx').on(columns.createdAt),
  }),
)

export const users = pgTable(
  'users',
  {
    id: serial('id').primaryKey(),
    name: varchar('name').notNull(),
    role: enum_users_role('role'),
    status: enum_users_status('status'),
    admin_policy_agreement: boolean('admin_policy_agreement').notNull().default(false),
    date_of_last_policy_review: timestamp('date_of_last_policy_review', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    date_of_last_training: timestamp('date_of_last_training', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    reject_reason: varchar('reject_reason'),
    isEnabledTwoFactor: boolean('is_enabled_two_factor'),
    isInUseSecurePassword: boolean('is_in_use_secure_password'),
    isCompletedTrainingAccessibility: boolean('is_completed_training_accessibility'),
    isCompletedTrainingRisk: boolean('is_completed_training_risk'),
    isCompletedTrainingBrand: boolean('is_completed_training_brand'),
    hasKnowledgeStandards: boolean('has_knowledge_standards'),
    passwordUpdatedAt: timestamp('password_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    email: varchar('email').notNull(),
    resetPasswordToken: varchar('reset_password_token'),
    resetPasswordExpiration: timestamp('reset_password_expiration', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar('salt'),
    hash: varchar('hash'),
    loginAttempts: numeric('login_attempts').default('0'),
    lockUntil: timestamp('lock_until', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    users_updated_at_idx: index('users_updated_at_idx').on(columns.updatedAt),
    users_created_at_idx: index('users_created_at_idx').on(columns.createdAt),
    users_email_idx: uniqueIndex('users_email_idx').on(columns.email),
  }),
)

export const users_rels = pgTable(
  'users_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    organizationID: integer('organization_id'),
  },
  (columns) => ({
    order: index('users_rels_order_idx').on(columns.order),
    parentIdx: index('users_rels_parent_idx').on(columns.parent),
    pathIdx: index('users_rels_path_idx').on(columns.path),
    users_rels_organization_id_idx: index('users_rels_organization_id_idx').on(
      columns.organizationID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [users.id],
      name: 'users_rels_parent_fk',
    }).onDelete('cascade'),
    organizationIdFk: foreignKey({
      columns: [columns['organizationID']],
      foreignColumns: [organization.id],
      name: 'users_rels_organization_fk',
    }).onDelete('cascade'),
  }),
)

export const social_medias_admin_contact_emails = pgTable(
  'social_medias_admin_contact_emails',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    email: varchar('email'),
  },
  (columns) => ({
    _orderIdx: index('social_medias_admin_contact_emails_order_idx').on(columns._order),
    _parentIDIdx: index('social_medias_admin_contact_emails_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [social_medias.id],
      name: 'social_medias_admin_contact_emails_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const social_medias_linked_tools = pgTable(
  'social_medias_linked_tools',
  {
    order: integer('order').notNull(),
    parent: integer('parent_id').notNull(),
    value: enum_social_medias_linked_tools('value'),
    id: serial('id').primaryKey(),
  },
  (columns) => ({
    orderIdx: index('social_medias_linked_tools_order_idx').on(columns.order),
    parentIdx: index('social_medias_linked_tools_parent_idx').on(columns.parent),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [social_medias.id],
      name: 'social_medias_linked_tools_parent_fk',
    }).onDelete('cascade'),
  }),
)

export const social_medias = pgTable(
  'social_medias',
  {
    id: serial('id').primaryKey(),
    name: varchar('name').notNull(),
    profileUrl: varchar('profile_url').notNull(),
    platform: enum_social_medias_platform('platform').notNull(),
    accountHandle: varchar('account_handle'),
    businessId: varchar('business_id'),
    backupContactInfo: varchar('backup_contact_info'),
    thirdPartyManagement: enum_social_medias_third_party_management('third_party_management'),
    thirdPartyProvider: varchar('third_party_provider'),
    thirdPartyContact: varchar('third_party_contact'),
    passwordManagementPractice: enum_social_medias_password_management_practice(
      'password_management_practice',
    ),
    creationDate: timestamp('creation_date', { mode: 'string', withTimezone: true, precision: 3 }),
    verificationStatus: enum_social_medias_verification_status('verification_status'),
    platformSupportDetails: varchar('platform_support_details'),
    notes: varchar('notes'),
    contactEmail: varchar('contact_email'),
    contactPhone: varchar('contact_phone'),
    organization: integer('organization_id')
      .notNull()
      .references(() => organization.id, {
        onDelete: 'set null',
      }),
    primaryAdmin: integer('primary_admin_id')
      .notNull()
      .references(() => users.id, {
        onDelete: 'set null',
      }),
    backupAdmin: integer('backup_admin_id')
      .notNull()
      .references(() => users.id, {
        onDelete: 'set null',
      }),
    status: enum_social_medias_status('status').notNull(),
    deactivationReason: varchar('deactivation_reason'),
    inactiveFlag: boolean('inactive_flag').default(false),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    social_medias_profile_url_idx: uniqueIndex('social_medias_profile_url_idx').on(
      columns.profileUrl,
    ),
    social_medias_organization_idx: index('social_medias_organization_idx').on(
      columns.organization,
    ),
    social_medias_primary_admin_idx: index('social_medias_primary_admin_idx').on(
      columns.primaryAdmin,
    ),
    social_medias_backup_admin_idx: index('social_medias_backup_admin_idx').on(columns.backupAdmin),
    social_medias_updated_at_idx: index('social_medias_updated_at_idx').on(columns.updatedAt),
    social_medias_created_at_idx: index('social_medias_created_at_idx').on(columns.createdAt),
  }),
)

export const social_medias_rels = pgTable(
  'social_medias_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('social_medias_rels_order_idx').on(columns.order),
    parentIdx: index('social_medias_rels_parent_idx').on(columns.parent),
    pathIdx: index('social_medias_rels_path_idx').on(columns.path),
    social_medias_rels_users_id_idx: index('social_medias_rels_users_id_idx').on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [social_medias.id],
      name: 'social_medias_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'social_medias_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const policies = pgTable(
  'policies',
  {
    id: serial('id').primaryKey(),
    version: numeric('version').default('0.1'),
    text: jsonb('text'),
    author: integer('author_id').references(() => users.id, {
      onDelete: 'set null',
    }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    policies_version_idx: uniqueIndex('policies_version_idx').on(columns.version),
    policies_author_idx: index('policies_author_idx').on(columns.author),
    policies_updated_at_idx: index('policies_updated_at_idx').on(columns.updatedAt),
    policies_created_at_idx: index('policies_created_at_idx').on(columns.createdAt),
  }),
)

export const acknowledgments = pgTable(
  'acknowledgments',
  {
    id: serial('id').primaryKey(),
    policy: integer('policy_id').references(() => policies.id, {
      onDelete: 'set null',
    }),
    user: integer('user_id').references(() => users.id, {
      onDelete: 'set null',
    }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    acknowledgments_policy_idx: index('acknowledgments_policy_idx').on(columns.policy),
    acknowledgments_user_idx: index('acknowledgments_user_idx').on(columns.user),
    acknowledgments_updated_at_idx: index('acknowledgments_updated_at_idx').on(columns.updatedAt),
    acknowledgments_created_at_idx: index('acknowledgments_created_at_idx').on(columns.createdAt),
  }),
)

export const flags = pgTable(
  'flags',
  {
    id: serial('id').primaryKey(),
    flagType: varchar('flag_type'),
    status: enum_flags_status('status'),
    detectionDate: timestamp('detection_date', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    source: enum_flags_source('source'),
    lastActivity: timestamp('last_activity', { mode: 'string', withTimezone: true, precision: 3 }),
    description: varchar('description'),
    suggestedAction: varchar('suggested_action'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    flags_updated_at_idx: index('flags_updated_at_idx').on(columns.updatedAt),
    flags_created_at_idx: index('flags_created_at_idx').on(columns.createdAt),
  }),
)

export const flags_rels = pgTable(
  'flags_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
    'social-mediasID': integer('social_medias_id'),
    organizationID: integer('organization_id'),
  },
  (columns) => ({
    order: index('flags_rels_order_idx').on(columns.order),
    parentIdx: index('flags_rels_parent_idx').on(columns.parent),
    pathIdx: index('flags_rels_path_idx').on(columns.path),
    flags_rels_users_id_idx: index('flags_rels_users_id_idx').on(columns.usersID),
    flags_rels_social_medias_id_idx: index('flags_rels_social_medias_id_idx').on(
      columns['social-mediasID'],
    ),
    flags_rels_organization_id_idx: index('flags_rels_organization_id_idx').on(
      columns.organizationID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [flags.id],
      name: 'flags_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'flags_rels_users_fk',
    }).onDelete('cascade'),
    'social-mediasIdFk': foreignKey({
      columns: [columns['social-mediasID']],
      foreignColumns: [social_medias.id],
      name: 'flags_rels_social_medias_fk',
    }).onDelete('cascade'),
    organizationIdFk: foreignKey({
      columns: [columns['organizationID']],
      foreignColumns: [organization.id],
      name: 'flags_rels_organization_fk',
    }).onDelete('cascade'),
  }),
)

export const flag_history = pgTable(
  'flag_history',
  {
    id: serial('id').primaryKey(),
    flag: integer('flag_id').references(() => flags.id, {
      onDelete: 'set null',
    }),
    user: integer('user_id').references(() => users.id, {
      onDelete: 'set null',
    }),
    action: enum_flag_history_action('action'),
    prevStatus: enum_flag_history_prev_status('prev_status'),
    newStatus: enum_flag_history_new_status('new_status'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    flag_history_flag_idx: index('flag_history_flag_idx').on(columns.flag),
    flag_history_user_idx: index('flag_history_user_idx').on(columns.user),
    flag_history_updated_at_idx: index('flag_history_updated_at_idx').on(columns.updatedAt),
    flag_history_created_at_idx: index('flag_history_created_at_idx').on(columns.createdAt),
  }),
)

export const flag_comments = pgTable(
  'flag_comments',
  {
    id: serial('id').primaryKey(),
    flag: integer('flag_id').references(() => flags.id, {
      onDelete: 'set null',
    }),
    user: integer('user_id').references(() => users.id, {
      onDelete: 'set null',
    }),
    comment: varchar('comment'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    flag_comments_flag_idx: index('flag_comments_flag_idx').on(columns.flag),
    flag_comments_user_idx: index('flag_comments_user_idx').on(columns.user),
    flag_comments_updated_at_idx: index('flag_comments_updated_at_idx').on(columns.updatedAt),
    flag_comments_created_at_idx: index('flag_comments_created_at_idx').on(columns.createdAt),
  }),
)

export const audit_log = pgTable(
  'audit_log',
  {
    id: serial('id').primaryKey(),
    user: integer('user_id')
      .notNull()
      .references(() => users.id, {
        onDelete: 'set null',
      }),
    action: enum_audit_log_action('action').notNull(),
    entity: varchar('entity').notNull(),
    prev: jsonb('prev'),
    current: jsonb('current'),
    metadata: jsonb('metadata'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    audit_log_user_idx: index('audit_log_user_idx').on(columns.user),
    audit_log_updated_at_idx: index('audit_log_updated_at_idx').on(columns.updatedAt),
    audit_log_created_at_idx: index('audit_log_created_at_idx').on(columns.createdAt),
  }),
)

export const audit_log_rels = pgTable(
  'audit_log_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    organizationID: integer('organization_id'),
    usersID: integer('users_id'),
    'social-mediasID': integer('social_medias_id'),
    organization_accessID: integer('organization_access_id'),
    flagsID: integer('flags_id'),
    flagCommentsID: integer('flag_comments_id'),
  },
  (columns) => ({
    order: index('audit_log_rels_order_idx').on(columns.order),
    parentIdx: index('audit_log_rels_parent_idx').on(columns.parent),
    pathIdx: index('audit_log_rels_path_idx').on(columns.path),
    audit_log_rels_organization_id_idx: index('audit_log_rels_organization_id_idx').on(
      columns.organizationID,
    ),
    audit_log_rels_users_id_idx: index('audit_log_rels_users_id_idx').on(columns.usersID),
    audit_log_rels_social_medias_id_idx: index('audit_log_rels_social_medias_id_idx').on(
      columns['social-mediasID'],
    ),
    audit_log_rels_organization_access_id_idx: index(
      'audit_log_rels_organization_access_id_idx',
    ).on(columns.organization_accessID),
    audit_log_rels_flags_id_idx: index('audit_log_rels_flags_id_idx').on(columns.flagsID),
    audit_log_rels_flag_comments_id_idx: index('audit_log_rels_flag_comments_id_idx').on(
      columns.flagCommentsID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [audit_log.id],
      name: 'audit_log_rels_parent_fk',
    }).onDelete('cascade'),
    organizationIdFk: foreignKey({
      columns: [columns['organizationID']],
      foreignColumns: [organization.id],
      name: 'audit_log_rels_organization_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'audit_log_rels_users_fk',
    }).onDelete('cascade'),
    'social-mediasIdFk': foreignKey({
      columns: [columns['social-mediasID']],
      foreignColumns: [social_medias.id],
      name: 'audit_log_rels_social_medias_fk',
    }).onDelete('cascade'),
    organization_accessIdFk: foreignKey({
      columns: [columns['organization_accessID']],
      foreignColumns: [organization_access.id],
      name: 'audit_log_rels_organization_access_fk',
    }).onDelete('cascade'),
    flagsIdFk: foreignKey({
      columns: [columns['flagsID']],
      foreignColumns: [flags.id],
      name: 'audit_log_rels_flags_fk',
    }).onDelete('cascade'),
    flagCommentsIdFk: foreignKey({
      columns: [columns['flagCommentsID']],
      foreignColumns: [flag_comments.id],
      name: 'audit_log_rels_flag_comments_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_jobs_log = pgTable(
  'payload_jobs_log',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    executedAt: timestamp('executed_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
    completedAt: timestamp('completed_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
    taskSlug: enum_payload_jobs_log_task_slug('task_slug').notNull(),
    taskID: varchar('task_i_d').notNull(),
    input: jsonb('input'),
    output: jsonb('output'),
    state: enum_payload_jobs_log_state('state').notNull(),
    error: jsonb('error'),
  },
  (columns) => ({
    _orderIdx: index('payload_jobs_log_order_idx').on(columns._order),
    _parentIDIdx: index('payload_jobs_log_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [payload_jobs.id],
      name: 'payload_jobs_log_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_jobs = pgTable(
  'payload_jobs',
  {
    id: serial('id').primaryKey(),
    input: jsonb('input'),
    completedAt: timestamp('completed_at', { mode: 'string', withTimezone: true, precision: 3 }),
    totalTried: numeric('total_tried').default('0'),
    hasError: boolean('has_error').default(false),
    error: jsonb('error'),
    taskSlug: enum_payload_jobs_task_slug('task_slug'),
    queue: varchar('queue').default('default'),
    waitUntil: timestamp('wait_until', { mode: 'string', withTimezone: true, precision: 3 }),
    processing: boolean('processing').default(false),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_jobs_completed_at_idx: index('payload_jobs_completed_at_idx').on(columns.completedAt),
    payload_jobs_total_tried_idx: index('payload_jobs_total_tried_idx').on(columns.totalTried),
    payload_jobs_has_error_idx: index('payload_jobs_has_error_idx').on(columns.hasError),
    payload_jobs_task_slug_idx: index('payload_jobs_task_slug_idx').on(columns.taskSlug),
    payload_jobs_queue_idx: index('payload_jobs_queue_idx').on(columns.queue),
    payload_jobs_wait_until_idx: index('payload_jobs_wait_until_idx').on(columns.waitUntil),
    payload_jobs_processing_idx: index('payload_jobs_processing_idx').on(columns.processing),
    payload_jobs_updated_at_idx: index('payload_jobs_updated_at_idx').on(columns.updatedAt),
    payload_jobs_created_at_idx: index('payload_jobs_created_at_idx').on(columns.createdAt),
  }),
)

export const payload_locked_documents = pgTable(
  'payload_locked_documents',
  {
    id: serial('id').primaryKey(),
    globalSlug: varchar('global_slug'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index('payload_locked_documents_global_slug_idx').on(
      columns.globalSlug,
    ),
    payload_locked_documents_updated_at_idx: index('payload_locked_documents_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_locked_documents_created_at_idx: index('payload_locked_documents_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_locked_documents_rels = pgTable(
  'payload_locked_documents_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    organizationID: integer('organization_id'),
    organization_accessID: integer('organization_access_id'),
    'welcome-emailsID': integer('welcome_emails_id'),
    usersID: integer('users_id'),
    'social-mediasID': integer('social_medias_id'),
    policiesID: integer('policies_id'),
    acknowledgmentsID: integer('acknowledgments_id'),
    flagsID: integer('flags_id'),
    flagHistoryID: integer('flag_history_id'),
    flagCommentsID: integer('flag_comments_id'),
    audit_logID: integer('audit_log_id'),
    'payload-jobsID': integer('payload_jobs_id'),
  },
  (columns) => ({
    order: index('payload_locked_documents_rels_order_idx').on(columns.order),
    parentIdx: index('payload_locked_documents_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_locked_documents_rels_path_idx').on(columns.path),
    payload_locked_documents_rels_organization_id_idx: index(
      'payload_locked_documents_rels_organization_id_idx',
    ).on(columns.organizationID),
    payload_locked_documents_rels_organization_access_id_idx: index(
      'payload_locked_documents_rels_organization_access_id_idx',
    ).on(columns.organization_accessID),
    payload_locked_documents_rels_welcome_emails_id_idx: index(
      'payload_locked_documents_rels_welcome_emails_id_idx',
    ).on(columns['welcome-emailsID']),
    payload_locked_documents_rels_users_id_idx: index(
      'payload_locked_documents_rels_users_id_idx',
    ).on(columns.usersID),
    payload_locked_documents_rels_social_medias_id_idx: index(
      'payload_locked_documents_rels_social_medias_id_idx',
    ).on(columns['social-mediasID']),
    payload_locked_documents_rels_policies_id_idx: index(
      'payload_locked_documents_rels_policies_id_idx',
    ).on(columns.policiesID),
    payload_locked_documents_rels_acknowledgments_id_idx: index(
      'payload_locked_documents_rels_acknowledgments_id_idx',
    ).on(columns.acknowledgmentsID),
    payload_locked_documents_rels_flags_id_idx: index(
      'payload_locked_documents_rels_flags_id_idx',
    ).on(columns.flagsID),
    payload_locked_documents_rels_flag_history_id_idx: index(
      'payload_locked_documents_rels_flag_history_id_idx',
    ).on(columns.flagHistoryID),
    payload_locked_documents_rels_flag_comments_id_idx: index(
      'payload_locked_documents_rels_flag_comments_id_idx',
    ).on(columns.flagCommentsID),
    payload_locked_documents_rels_audit_log_id_idx: index(
      'payload_locked_documents_rels_audit_log_id_idx',
    ).on(columns.audit_logID),
    payload_locked_documents_rels_payload_jobs_id_idx: index(
      'payload_locked_documents_rels_payload_jobs_id_idx',
    ).on(columns['payload-jobsID']),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_locked_documents.id],
      name: 'payload_locked_documents_rels_parent_fk',
    }).onDelete('cascade'),
    organizationIdFk: foreignKey({
      columns: [columns['organizationID']],
      foreignColumns: [organization.id],
      name: 'payload_locked_documents_rels_organization_fk',
    }).onDelete('cascade'),
    organization_accessIdFk: foreignKey({
      columns: [columns['organization_accessID']],
      foreignColumns: [organization_access.id],
      name: 'payload_locked_documents_rels_organization_access_fk',
    }).onDelete('cascade'),
    'welcome-emailsIdFk': foreignKey({
      columns: [columns['welcome-emailsID']],
      foreignColumns: [welcome_emails.id],
      name: 'payload_locked_documents_rels_welcome_emails_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_locked_documents_rels_users_fk',
    }).onDelete('cascade'),
    'social-mediasIdFk': foreignKey({
      columns: [columns['social-mediasID']],
      foreignColumns: [social_medias.id],
      name: 'payload_locked_documents_rels_social_medias_fk',
    }).onDelete('cascade'),
    policiesIdFk: foreignKey({
      columns: [columns['policiesID']],
      foreignColumns: [policies.id],
      name: 'payload_locked_documents_rels_policies_fk',
    }).onDelete('cascade'),
    acknowledgmentsIdFk: foreignKey({
      columns: [columns['acknowledgmentsID']],
      foreignColumns: [acknowledgments.id],
      name: 'payload_locked_documents_rels_acknowledgments_fk',
    }).onDelete('cascade'),
    flagsIdFk: foreignKey({
      columns: [columns['flagsID']],
      foreignColumns: [flags.id],
      name: 'payload_locked_documents_rels_flags_fk',
    }).onDelete('cascade'),
    flagHistoryIdFk: foreignKey({
      columns: [columns['flagHistoryID']],
      foreignColumns: [flag_history.id],
      name: 'payload_locked_documents_rels_flag_history_fk',
    }).onDelete('cascade'),
    flagCommentsIdFk: foreignKey({
      columns: [columns['flagCommentsID']],
      foreignColumns: [flag_comments.id],
      name: 'payload_locked_documents_rels_flag_comments_fk',
    }).onDelete('cascade'),
    audit_logIdFk: foreignKey({
      columns: [columns['audit_logID']],
      foreignColumns: [audit_log.id],
      name: 'payload_locked_documents_rels_audit_log_fk',
    }).onDelete('cascade'),
    'payload-jobsIdFk': foreignKey({
      columns: [columns['payload-jobsID']],
      foreignColumns: [payload_jobs.id],
      name: 'payload_locked_documents_rels_payload_jobs_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_preferences = pgTable(
  'payload_preferences',
  {
    id: serial('id').primaryKey(),
    key: varchar('key'),
    value: jsonb('value'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index('payload_preferences_key_idx').on(columns.key),
    payload_preferences_updated_at_idx: index('payload_preferences_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_preferences_created_at_idx: index('payload_preferences_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_preferences_rels = pgTable(
  'payload_preferences_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('payload_preferences_rels_order_idx').on(columns.order),
    parentIdx: index('payload_preferences_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_preferences_rels_path_idx').on(columns.path),
    payload_preferences_rels_users_id_idx: index('payload_preferences_rels_users_id_idx').on(
      columns.usersID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_preferences.id],
      name: 'payload_preferences_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_preferences_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_migrations = pgTable(
  'payload_migrations',
  {
    id: serial('id').primaryKey(),
    name: varchar('name'),
    batch: numeric('batch'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index('payload_migrations_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_migrations_created_at_idx: index('payload_migrations_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const relations_organization_rels = relations(organization_rels, ({ one }) => ({
  parent: one(organization, {
    fields: [organization_rels.parent],
    references: [organization.id],
    relationName: '_rels',
  }),
  usersID: one(users, {
    fields: [organization_rels.usersID],
    references: [users.id],
    relationName: 'users',
  }),
}))
export const relations_organization = relations(organization, ({ one, many }) => ({
  parentOrg: one(organization, {
    fields: [organization.parentOrg],
    references: [organization.id],
    relationName: 'parentOrg',
  }),
  admin: one(users, {
    fields: [organization.admin],
    references: [users.id],
    relationName: 'admin',
  }),
  _rels: many(organization_rels, {
    relationName: '_rels',
  }),
}))
export const relations_organization_access = relations(organization_access, ({ one }) => ({
  organization: one(organization, {
    fields: [organization_access.organization],
    references: [organization.id],
    relationName: 'organization',
  }),
  user: one(users, {
    fields: [organization_access.user],
    references: [users.id],
    relationName: 'user',
  }),
}))
export const relations_welcome_emails_responsibilities = relations(
  welcome_emails_responsibilities,
  ({ one }) => ({
    _parentID: one(welcome_emails, {
      fields: [welcome_emails_responsibilities._parentID],
      references: [welcome_emails.id],
      relationName: 'responsibilities',
    }),
  }),
)
export const relations_welcome_emails_policy_links = relations(
  welcome_emails_policy_links,
  ({ one }) => ({
    _parentID: one(welcome_emails, {
      fields: [welcome_emails_policy_links._parentID],
      references: [welcome_emails.id],
      relationName: 'policyLinks',
    }),
  }),
)
export const relations_welcome_emails = relations(welcome_emails, ({ many }) => ({
  responsibilities: many(welcome_emails_responsibilities, {
    relationName: 'responsibilities',
  }),
  policyLinks: many(welcome_emails_policy_links, {
    relationName: 'policyLinks',
  }),
}))
export const relations_users_rels = relations(users_rels, ({ one }) => ({
  parent: one(users, {
    fields: [users_rels.parent],
    references: [users.id],
    relationName: '_rels',
  }),
  organizationID: one(organization, {
    fields: [users_rels.organizationID],
    references: [organization.id],
    relationName: 'organization',
  }),
}))
export const relations_users = relations(users, ({ many }) => ({
  _rels: many(users_rels, {
    relationName: '_rels',
  }),
}))
export const relations_social_medias_admin_contact_emails = relations(
  social_medias_admin_contact_emails,
  ({ one }) => ({
    _parentID: one(social_medias, {
      fields: [social_medias_admin_contact_emails._parentID],
      references: [social_medias.id],
      relationName: 'adminContactEmails',
    }),
  }),
)
export const relations_social_medias_linked_tools = relations(
  social_medias_linked_tools,
  ({ one }) => ({
    parent: one(social_medias, {
      fields: [social_medias_linked_tools.parent],
      references: [social_medias.id],
      relationName: 'linkedTools',
    }),
  }),
)
export const relations_social_medias_rels = relations(social_medias_rels, ({ one }) => ({
  parent: one(social_medias, {
    fields: [social_medias_rels.parent],
    references: [social_medias.id],
    relationName: '_rels',
  }),
  usersID: one(users, {
    fields: [social_medias_rels.usersID],
    references: [users.id],
    relationName: 'users',
  }),
}))
export const relations_social_medias = relations(social_medias, ({ one, many }) => ({
  adminContactEmails: many(social_medias_admin_contact_emails, {
    relationName: 'adminContactEmails',
  }),
  linkedTools: many(social_medias_linked_tools, {
    relationName: 'linkedTools',
  }),
  organization: one(organization, {
    fields: [social_medias.organization],
    references: [organization.id],
    relationName: 'organization',
  }),
  primaryAdmin: one(users, {
    fields: [social_medias.primaryAdmin],
    references: [users.id],
    relationName: 'primaryAdmin',
  }),
  backupAdmin: one(users, {
    fields: [social_medias.backupAdmin],
    references: [users.id],
    relationName: 'backupAdmin',
  }),
  _rels: many(social_medias_rels, {
    relationName: '_rels',
  }),
}))
export const relations_policies = relations(policies, ({ one }) => ({
  author: one(users, {
    fields: [policies.author],
    references: [users.id],
    relationName: 'author',
  }),
}))
export const relations_acknowledgments = relations(acknowledgments, ({ one }) => ({
  policy: one(policies, {
    fields: [acknowledgments.policy],
    references: [policies.id],
    relationName: 'policy',
  }),
  user: one(users, {
    fields: [acknowledgments.user],
    references: [users.id],
    relationName: 'user',
  }),
}))
export const relations_flags_rels = relations(flags_rels, ({ one }) => ({
  parent: one(flags, {
    fields: [flags_rels.parent],
    references: [flags.id],
    relationName: '_rels',
  }),
  usersID: one(users, {
    fields: [flags_rels.usersID],
    references: [users.id],
    relationName: 'users',
  }),
  'social-mediasID': one(social_medias, {
    fields: [flags_rels['social-mediasID']],
    references: [social_medias.id],
    relationName: 'social-medias',
  }),
  organizationID: one(organization, {
    fields: [flags_rels.organizationID],
    references: [organization.id],
    relationName: 'organization',
  }),
}))
export const relations_flags = relations(flags, ({ many }) => ({
  _rels: many(flags_rels, {
    relationName: '_rels',
  }),
}))
export const relations_flag_history = relations(flag_history, ({ one }) => ({
  flag: one(flags, {
    fields: [flag_history.flag],
    references: [flags.id],
    relationName: 'flag',
  }),
  user: one(users, {
    fields: [flag_history.user],
    references: [users.id],
    relationName: 'user',
  }),
}))
export const relations_flag_comments = relations(flag_comments, ({ one }) => ({
  flag: one(flags, {
    fields: [flag_comments.flag],
    references: [flags.id],
    relationName: 'flag',
  }),
  user: one(users, {
    fields: [flag_comments.user],
    references: [users.id],
    relationName: 'user',
  }),
}))
export const relations_audit_log_rels = relations(audit_log_rels, ({ one }) => ({
  parent: one(audit_log, {
    fields: [audit_log_rels.parent],
    references: [audit_log.id],
    relationName: '_rels',
  }),
  organizationID: one(organization, {
    fields: [audit_log_rels.organizationID],
    references: [organization.id],
    relationName: 'organization',
  }),
  usersID: one(users, {
    fields: [audit_log_rels.usersID],
    references: [users.id],
    relationName: 'users',
  }),
  'social-mediasID': one(social_medias, {
    fields: [audit_log_rels['social-mediasID']],
    references: [social_medias.id],
    relationName: 'social-medias',
  }),
  organization_accessID: one(organization_access, {
    fields: [audit_log_rels.organization_accessID],
    references: [organization_access.id],
    relationName: 'organization_access',
  }),
  flagsID: one(flags, {
    fields: [audit_log_rels.flagsID],
    references: [flags.id],
    relationName: 'flags',
  }),
  flagCommentsID: one(flag_comments, {
    fields: [audit_log_rels.flagCommentsID],
    references: [flag_comments.id],
    relationName: 'flagComments',
  }),
}))
export const relations_audit_log = relations(audit_log, ({ one, many }) => ({
  user: one(users, {
    fields: [audit_log.user],
    references: [users.id],
    relationName: 'user',
  }),
  _rels: many(audit_log_rels, {
    relationName: '_rels',
  }),
}))
export const relations_payload_jobs_log = relations(payload_jobs_log, ({ one }) => ({
  _parentID: one(payload_jobs, {
    fields: [payload_jobs_log._parentID],
    references: [payload_jobs.id],
    relationName: 'log',
  }),
}))
export const relations_payload_jobs = relations(payload_jobs, ({ many }) => ({
  log: many(payload_jobs_log, {
    relationName: 'log',
  }),
}))
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: '_rels',
    }),
    organizationID: one(organization, {
      fields: [payload_locked_documents_rels.organizationID],
      references: [organization.id],
      relationName: 'organization',
    }),
    organization_accessID: one(organization_access, {
      fields: [payload_locked_documents_rels.organization_accessID],
      references: [organization_access.id],
      relationName: 'organization_access',
    }),
    'welcome-emailsID': one(welcome_emails, {
      fields: [payload_locked_documents_rels['welcome-emailsID']],
      references: [welcome_emails.id],
      relationName: 'welcome-emails',
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
    'social-mediasID': one(social_medias, {
      fields: [payload_locked_documents_rels['social-mediasID']],
      references: [social_medias.id],
      relationName: 'social-medias',
    }),
    policiesID: one(policies, {
      fields: [payload_locked_documents_rels.policiesID],
      references: [policies.id],
      relationName: 'policies',
    }),
    acknowledgmentsID: one(acknowledgments, {
      fields: [payload_locked_documents_rels.acknowledgmentsID],
      references: [acknowledgments.id],
      relationName: 'acknowledgments',
    }),
    flagsID: one(flags, {
      fields: [payload_locked_documents_rels.flagsID],
      references: [flags.id],
      relationName: 'flags',
    }),
    flagHistoryID: one(flag_history, {
      fields: [payload_locked_documents_rels.flagHistoryID],
      references: [flag_history.id],
      relationName: 'flagHistory',
    }),
    flagCommentsID: one(flag_comments, {
      fields: [payload_locked_documents_rels.flagCommentsID],
      references: [flag_comments.id],
      relationName: 'flagComments',
    }),
    audit_logID: one(audit_log, {
      fields: [payload_locked_documents_rels.audit_logID],
      references: [audit_log.id],
      relationName: 'audit_log',
    }),
    'payload-jobsID': one(payload_jobs, {
      fields: [payload_locked_documents_rels['payload-jobsID']],
      references: [payload_jobs.id],
      relationName: 'payload-jobs',
    }),
  }),
)
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: '_rels',
    }),
  }),
)
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
  }),
)
export const relations_payload_preferences = relations(payload_preferences, ({ many }) => ({
  _rels: many(payload_preferences_rels, {
    relationName: '_rels',
  }),
}))
export const relations_payload_migrations = relations(payload_migrations, () => ({}))

type DatabaseSchema = {
  enum_organization_type: typeof enum_organization_type
  enum_organization_status: typeof enum_organization_status
  enum_organization_access_type: typeof enum_organization_access_type
  enum_users_role: typeof enum_users_role
  enum_users_status: typeof enum_users_status
  enum_social_medias_linked_tools: typeof enum_social_medias_linked_tools
  enum_social_medias_platform: typeof enum_social_medias_platform
  enum_social_medias_third_party_management: typeof enum_social_medias_third_party_management
  enum_social_medias_password_management_practice: typeof enum_social_medias_password_management_practice
  enum_social_medias_verification_status: typeof enum_social_medias_verification_status
  enum_social_medias_status: typeof enum_social_medias_status
  enum_flags_status: typeof enum_flags_status
  enum_flags_source: typeof enum_flags_source
  enum_flag_history_action: typeof enum_flag_history_action
  enum_flag_history_prev_status: typeof enum_flag_history_prev_status
  enum_flag_history_new_status: typeof enum_flag_history_new_status
  enum_audit_log_action: typeof enum_audit_log_action
  enum_payload_jobs_log_task_slug: typeof enum_payload_jobs_log_task_slug
  enum_payload_jobs_log_state: typeof enum_payload_jobs_log_state
  enum_payload_jobs_task_slug: typeof enum_payload_jobs_task_slug
  organization: typeof organization
  organization_rels: typeof organization_rels
  organization_access: typeof organization_access
  welcome_emails_responsibilities: typeof welcome_emails_responsibilities
  welcome_emails_policy_links: typeof welcome_emails_policy_links
  welcome_emails: typeof welcome_emails
  users: typeof users
  users_rels: typeof users_rels
  social_medias_admin_contact_emails: typeof social_medias_admin_contact_emails
  social_medias_linked_tools: typeof social_medias_linked_tools
  social_medias: typeof social_medias
  social_medias_rels: typeof social_medias_rels
  policies: typeof policies
  acknowledgments: typeof acknowledgments
  flags: typeof flags
  flags_rels: typeof flags_rels
  flag_history: typeof flag_history
  flag_comments: typeof flag_comments
  audit_log: typeof audit_log
  audit_log_rels: typeof audit_log_rels
  payload_jobs_log: typeof payload_jobs_log
  payload_jobs: typeof payload_jobs
  payload_locked_documents: typeof payload_locked_documents
  payload_locked_documents_rels: typeof payload_locked_documents_rels
  payload_preferences: typeof payload_preferences
  payload_preferences_rels: typeof payload_preferences_rels
  payload_migrations: typeof payload_migrations
  relations_organization_rels: typeof relations_organization_rels
  relations_organization: typeof relations_organization
  relations_organization_access: typeof relations_organization_access
  relations_welcome_emails_responsibilities: typeof relations_welcome_emails_responsibilities
  relations_welcome_emails_policy_links: typeof relations_welcome_emails_policy_links
  relations_welcome_emails: typeof relations_welcome_emails
  relations_users_rels: typeof relations_users_rels
  relations_users: typeof relations_users
  relations_social_medias_admin_contact_emails: typeof relations_social_medias_admin_contact_emails
  relations_social_medias_linked_tools: typeof relations_social_medias_linked_tools
  relations_social_medias_rels: typeof relations_social_medias_rels
  relations_social_medias: typeof relations_social_medias
  relations_policies: typeof relations_policies
  relations_acknowledgments: typeof relations_acknowledgments
  relations_flags_rels: typeof relations_flags_rels
  relations_flags: typeof relations_flags
  relations_flag_history: typeof relations_flag_history
  relations_flag_comments: typeof relations_flag_comments
  relations_audit_log_rels: typeof relations_audit_log_rels
  relations_audit_log: typeof relations_audit_log
  relations_payload_jobs_log: typeof relations_payload_jobs_log
  relations_payload_jobs: typeof relations_payload_jobs
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels
  relations_payload_locked_documents: typeof relations_payload_locked_documents
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels
  relations_payload_preferences: typeof relations_payload_preferences
  relations_payload_migrations: typeof relations_payload_migrations
}

declare module '@payloadcms/db-vercel-postgres/' {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema
  }
}
